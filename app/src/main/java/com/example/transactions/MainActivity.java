package com.example.transactions;import android.os.Bundle;import android.view.View;import androidx.appcompat.app.AppCompatActivity;import com.example.transactions.databinding.ActivityMainBinding;import com.google.android.gms.tasks.OnSuccessListener;import com.google.firebase.firestore.CollectionReference;import com.google.firebase.firestore.FieldValue;import com.google.firebase.firestore.FirebaseFirestore;import com.google.firebase.firestore.QueryDocumentSnapshot;import com.google.firebase.firestore.QuerySnapshot;import com.google.firebase.firestore.WriteBatch;import java.util.HashMap;import java.util.Map;public class MainActivity extends AppCompatActivity {    private ActivityMainBinding binding;    private FirebaseFirestore db = FirebaseFirestore.getInstance();    private CollectionReference notebookRef = db.collection("Notebook");// TODO TRANSACTION// ----------------------------------------------------------////    @Override//    protected void onCreate(Bundle savedInstanceState) {//        super.onCreate(savedInstanceState);//        binding = ActivityMainBinding.inflate(getLayoutInflater());//        setContentView(binding.getRoot());////        executeTransaction();////    }//////    public void addNote(View v) {//        String title = binding.editTitle.getText().toString();//        String description = binding.editDescription.getText().toString();//        int priority = Integer.parseInt(binding.editPriority.getText().toString());////        Note note = new Note(title, description, priority);//        notebookRef.add(note);//    }////    public void deleteNote(View v) {//        notebookRef.get().addOnSuccessListener(new OnSuccessListener<QuerySnapshot>() {//            @Override//            public void onSuccess(QuerySnapshot queryDocumentSnapshots) {//                for (QueryDocumentSnapshot queryDocumentSnapshot : queryDocumentSnapshots) {//                    notebookRef.document(queryDocumentSnapshot.getId()).delete();//                }//            }//        });//    }////    public void loadNotes(View v) {//        notebookRef.get();//    }////    // TODO if use transaction make sure read first before doing write into document//    private void executeTransaction() {//        db.runTransaction(new Transaction.Function<Long>() {//            @Override//            public Long apply(@NonNull Transaction transaction) throws FirebaseFirestoreException {//                DocumentReference documentRef = notebookRef.document("new note");//                DocumentSnapshot documentSnap = transaction.get(documentRef);//                long newPriority = documentSnap.getLong("priority") + 1;//                transaction.update(documentRef, "priority", newPriority);//                return newPriority;//            }//        }).addOnSuccessListener(new OnSuccessListener<Long>() {//            @Override//            public void onSuccess(Long result) {////                Toast.makeText(MainActivity.this, "priority "+result, Toast.LENGTH_SHORT).show();//                binding.textViewDocument.setText("new priority : " + result);//            }//        });//    }    // TODO ARRAYS Firebase//----------------------------------------------------------////    @Override//    protected void onCreate(Bundle savedInstanceState) {//        super.onCreate(savedInstanceState);//        binding = ActivityMainBinding.inflate(getLayoutInflater());//        setContentView(binding.getRoot());////        updateArray();////    }//////    public void addNote(View v) {//        String title = binding.editTitle.getText().toString();//        String description = binding.editDescription.getText().toString();//        int priority = Integer.parseInt(binding.editPriority.getText().toString());////        String[] arrayTag = binding.editTags.getText().toString().split("\\s*,\\s*");//        List<String> tags = Arrays.asList(arrayTag);////        Note note = new Note(title, description, priority, tags);//        notebookRef.add(note);//    }////    public void deleteNote(View v) {//        notebookRef.get().addOnSuccessListener(new OnSuccessListener<QuerySnapshot>() {//            @Override//            public void onSuccess(QuerySnapshot queryDocumentSnapshots) {//                WriteBatch batch = db.batch();//                for (QueryDocumentSnapshot queryDocumentSnapshot : queryDocumentSnapshots) {//                    batch.delete(notebookRef.document(queryDocumentSnapshot.getId()));////                    notebookRef.document().delete();//                }//                batch.commit();//            }//        });//    }////    public void loadNotes(View v) {//        // can use query for array like : notebookRef.whereArrayContains()//        notebookRef.get()//                .addOnSuccessListener(new OnSuccessListener<QuerySnapshot>() {//                    @Override//                    public void onSuccess(QuerySnapshot queryDocumentSnapshots) {//                        String data = "";//                        for (QueryDocumentSnapshot queryDocumentSnapshot : queryDocumentSnapshots) {//                            Note note = queryDocumentSnapshot.toObject(Note.class);//                            note.setIdDocument(queryDocumentSnapshot.getId());//                            String documentId = note.getIdDocument();//                            data += "ID : " + documentId//                                    + "\nTitle : " + note.getTitle();//                            if(queryDocumentSnapshot.contains("tags")){//                                for (String tag : note.getTags()) {//                                    data += "\n- " + tag;//                                }//                            }//                            data += "\n\n";//                        }//                        binding.textViewDocument.setText(data);//                    }//                });//    }////    private void updateArray() {//        notebookRef.document("ilWeMgt1RTLhRVwKXhzC")////                .update("tags",FieldValue.arrayUnion("tag6"));//                  .update("tags",FieldValue.arrayRemove("tag3","tag4"));////    }    // TODO NESTED OBJECT    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        binding = ActivityMainBinding.inflate(getLayoutInflater());        setContentView(binding.getRoot());        updateNestedValue();    }    public void addNote(View v) {        String title = binding.editTitle.getText().toString();        String description = binding.editDescription.getText().toString();        if(binding.editPriority.length() == 0) binding.editPriority.setText("0");        int priority = Integer.parseInt(binding.editPriority.getText().toString());        String[] arrayTag = binding.editTags.getText().toString().split("\\s*,\\s*");        // bila ingin menambah map didalam nya berisi map dan isi lagi map dan baru berisi boolean//        Map<String,Map<String,Map<String,Boolean>>> tags = new HashMap<>();//        Map<String,Map<String,Boolean>> tag1 = new HashMap<>();////        Map<String,Boolean> nested1 = new HashMap<>();////        tags.put("tag1",tag1);//        tag1.put("nested1",nested1);////        for(String tag : arrayTag){//            nested1.put(tag,true);//        }        Map<String,Boolean> tags = new HashMap<>();        for (String tag : arrayTag){            tags.put(tag,true);        }        Note note = new Note(title, description, priority, tags);        notebookRef.add(note);    }    public void deleteNote(View v) {        notebookRef.get().addOnSuccessListener(new OnSuccessListener<QuerySnapshot>() {            @Override            public void onSuccess(QuerySnapshot queryDocumentSnapshots) {                WriteBatch batch = db.batch();                for (QueryDocumentSnapshot queryDocumentSnapshot : queryDocumentSnapshots) {                    batch.delete(notebookRef.document(queryDocumentSnapshot.getId()));                }                batch.commit();            }        });    }    public void loadNotes(View v) {        // can use query for array like : notebookRef.whereArrayContains()        notebookRef.whereEqualTo("tags.tag1",true).get()                .addOnSuccessListener(new OnSuccessListener<QuerySnapshot>() {                    @Override                    public void onSuccess(QuerySnapshot queryDocumentSnapshots) {                        String data = "";                        for (QueryDocumentSnapshot queryDocumentSnapshot : queryDocumentSnapshots) {                            Note note = queryDocumentSnapshot.toObject(Note.class);                            note.setIdDocument(queryDocumentSnapshot.getId());                            String documentId = note.getIdDocument();                            data += "ID : " + documentId                                    + "\nTitle : " + note.getTitle();                            // get nested note                            if(queryDocumentSnapshot.contains("tags")){                                for (String tag: note.getTags().keySet()) {                                    data += "\n- " + tag;                                }                            }                            data += "\n\n";                        }                        binding.textViewDocument.setText(data);                    }                });        // get 3 map nested//        notebookRef.whereEqualTo("tags.tag1.nested1.nested2",true)//                .get()//                .addOnSuccessListener(new OnSuccessListener<QuerySnapshot>() {//                    @Override//                    public void onSuccess(QuerySnapshot queryDocumentSnapshots) {//                        String data = "";//                        for(QueryDocumentSnapshot queryDocumentSnapshot : queryDocumentSnapshots){//                            Note note = queryDocumentSnapshot.toObject(Note.class);//                            note.setIdDocument(queryDocumentSnapshot.getId());////                            Map<String,Map<String,Boolean>> getnested1 = note.getTags().get("tag1");//                            Map<String,Boolean> getdata = getnested1.get("nested1");//                            for(String tag : getdata.keySet()){//                                data += "\n- " + tag;//                            }//                            data += "\n\n";////                        }//                        binding.textViewDocument.setText(data);////                    }//                });    }    private void updateNestedValue() {        notebookRef.document("uW8rTuJNE1c2rHVPCJvm")                .update("tags.tag1.nested1.nested2",true);//                .update("tags.ta", FieldValue.delete());//                .update("tags.tag3",false);    }}